@namespace Conventor2
@using Microsoft.AspNetCore.Html

@if (Convention == null) {
    return;
}

<table>
    @foreach (var childConvention in ChildConventions()) {
		<tr>
			<td>
                @RenderRawHTML(childConvention.HumanReadableBid)
			</td>

            @if (childConvention.Children.Count > 0) {
                var js = "this.parentElement.parentElement.parentElement.parentElement.removeAttribute('open'); event.preventDefault(); event.stopImmediatePropagation();";
            } else {
                var js = "this.getElementsByTagName("details")[0].removeAttribute('open'); event.preventDefault(); event.stopImmediatePropagation();";
            }
            <td>
                <div>
                    @RenderRawHTML(childConvention.HumanReadableDescription)
                </div>
                
                @if (childConvention.Children.Count > 0) {
                    <details open>
                        <summary>Expand</summary>
                        <ConventionTable StartingSequence="@childConvention.BiddingSequence" />
                    </details>
                }
			</td>
		</tr>
    }
</table>

@code {

    [Parameter]
    public String StartingSequence { get; set; } = "";

    public Convention? Convention {
        get {
            if (StartingSequence == null) {
                return ConventionExpander.RootConvention;
            }

            return ConventionExpander.GetConvention(StartingSequence);
        }
    }

    public RenderFragment RenderRawHTML(HtmlString? rawHTML) {
        return builder => {
            builder.AddMarkupContent(0, rawHTML?.Value ?? "");
        };
    }

    public IEnumerable<Convention> ChildConventions() {
        return (Convention?.Children.Values ?? Enumerable.Empty<Convention>()).OrderBy(c => c.SortOrder);
    }
}